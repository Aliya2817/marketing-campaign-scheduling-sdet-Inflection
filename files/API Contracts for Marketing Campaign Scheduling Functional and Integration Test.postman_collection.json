{
	"info": {
		"_postman_id": "22c4e2e1-f3d4-4a5a-a71a-dc1a278498a3",
		"name": "API Contracts for Marketing Campaign Scheduling Functional and Integarion Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25062590",
		"_collection_link": "https://gold-rocket-225813.postman.co/workspace/Team-Workspace~806a0c9c-589a-4ab2-8582-98718cb06cf1/collection/25062590-22c4e2e1-f3d4-4a5a-a71a-dc1a278498a3?action=share&source=collection_link&creator=25062590"
	},
	"item": [
		{
			"name": "Create Campaign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present and is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test successfull create campaign\",\n    \"schedule_time\": 1716777036,\n    \"recipient_list_id\": [1, 2],\n    \"email_template_id\": [1, 2]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test create campaign with recipient_list_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present and is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test create campaign with recipient_list_id\",\n    \"schedule_time\": 1716777036,\n    \"recipient_list_id\": [1, 3],\n    \"email_template_id\": [1, 2]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid campaign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for id, name, schedule_time, recipient_list_id, and email_template_id\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('schedule_time');",
							"  pm.expect(responseData).to.have.property('recipient_list_id');",
							"  pm.expect(responseData).to.have.property('email_template_id');",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=1",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid campaign Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=1l",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "1l"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Campaign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response schema has the required fields and data types\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test successfull update campaign\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=6",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Campaign status after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for id, name, schedule_time, recipient_list_id, and email_template_id\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('schedule_time');",
							"  pm.expect(responseData).to.have.property('recipient_list_id');",
							"  pm.expect(responseData).to.have.property('email_template_id');",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test to check the presence and format of the 'name' field",
							"pm.test(\"Name field is present and in the correct format\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							"// Test to check if the 'name' field in the response matches 'Test successful update campaign'",
							"pm.test(\"Name field in the response matches 'Test successful update campaign'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.name).to.equal('Test successful update campaign');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=6",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Campaign (Campaign not exists)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response schema has the required fields and data types\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test successfull update campaign\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=100",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Campaign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response schema has the required fields and data types\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test to check the presence and format of the 'message' field",
							"pm.test(\"Name field is present and in the correct format\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							"// Test to check if the 'message' field in the response matches 'Test successful update campaign'",
							"pm.test(\"message field in the response matches 'Test successful delete campaign'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.equal('campaign deleted successfully');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=100",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Campaign status after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema message\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test to check the presence and format of the 'message' field",
							"pm.test(\"message field is present and in the correct format\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							"// Test to check if the 'message' field in the response matches 'Test successful update campaign'",
							"pm.test(\"message field in the response matches 'Test successful update campaign'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.equal(\"campaign doesn't exists\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/css/campaigns?id=100",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"css",
						"campaigns"
					],
					"query": [
						{
							"key": "id",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Email Templates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.id).to.be.a('number');",
							"        pm.expect(item.name).to.be.a('string');",
							"        pm.expect(item.content).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each object in the array has the required fields - id, name, and content\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('content');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(template) {",
							"    pm.expect(template.content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/ets/email-templates",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"ets",
						"email-templates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Recipient Lists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id and emailId\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('emailId');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"// Test to check if each emailId in the response is valid",
							"pm.test(\"Each emailId in the response is valid\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.forEach(function(recipient) {",
							"        pm.expect(recipient.emailId).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7ojzd.wiremockapi.cloud/rs/recipient-lists",
					"protocol": "https",
					"host": [
						"7ojzd",
						"wiremockapi",
						"cloud"
					],
					"path": [
						"rs",
						"recipient-lists"
					]
				}
			},
			"response": []
		}
	]
}